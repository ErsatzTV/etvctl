// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

#nullable enable annotations

namespace etvctl.Api
{
    /// <summary>ErsatzTV | v1</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.5.0")]
    public partial interface IErsatzTVv1
    {
        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/channels")]
        Task<ICollection<ChannelResponseModel>> Channels(CancellationToken cancellationToken = default);

        /// <summary>Reset channel playout</summary>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Post("/api/channels/{channelNumber}/playout/reset")]
        Task Reset(string channelNumber, CancellationToken cancellationToken = default);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/ffmpeg/profiles")]
        Task<ICollection<FFmpegFullProfileResponseModel>> GetFFmpegProfiles(CancellationToken cancellationToken = default);

        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Content-Type: application/json")]
        [Post("/api/ffmpeg/profiles/new")]
        Task CreateFFmpegProfile([Body] CreateFFmpegProfile body, CancellationToken cancellationToken = default);

        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Content-Type: application/json")]
        [Put("/api/ffmpeg/profiles/update")]
        Task UpdateFFmpegProfile([Body] UpdateFFmpegProfile body, CancellationToken cancellationToken = default);

        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Delete("/api/ffmpeg/delete/{id}")]
        Task DeleteFFmpegProfile(int id, CancellationToken cancellationToken = default);

        /// <summary>Scan library</summary>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Post("/api/libraries/{id}/scan")]
        Task Scan(int id, CancellationToken cancellationToken = default);

        /// <summary>Scan show</summary>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Content-Type: application/json")]
        [Post("/api/libraries/{id}/scan-show")]
        Task ScanShow(int id, [Body] ScanShowRequest body, CancellationToken cancellationToken = default);

        /// <summary>Garbage collect</summary>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Get("/api/maintenance/gc")]
        Task Gc([Query] bool? force, CancellationToken cancellationToken = default);

        /// <summary>Empty trash</summary>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Post("/api/maintenance/empty_trash")]
        Task Trash(CancellationToken cancellationToken = default);

        /// <summary>Get sessions</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/sessions")]
        Task<ICollection<HlsSessionModel>> Sessions(CancellationToken cancellationToken = default);

        /// <summary>Stop session</summary>
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Delete("/api/session/{channelNumber}")]
        Task Session(string channelNumber, CancellationToken cancellationToken = default);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/collections/smart")]
        Task<ICollection<SmartCollectionResponseModel>> GetSmartCollections(CancellationToken cancellationToken = default);

        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Content-Type: application/json")]
        [Post("/api/collections/smart/new")]
        Task CreateSmartCollection([Body] CreateSmartCollection body, CancellationToken cancellationToken = default);

        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Content-Type: application/json")]
        [Put("/api/collections/smart/update")]
        Task UpdateSmartCollection([Body] UpdateSmartCollection body, CancellationToken cancellationToken = default);

        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Delete("/api/collections/smart/delete/{id}")]
        Task DeleteSmartCollection(int id, CancellationToken cancellationToken = default);

        /// <summary>Get version</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: text/plain, application/json, text/json")]
        [Get("/api/version")]
        Task<CombinedVersion> GetVersion(CancellationToken cancellationToken = default);


    }

}

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace etvctl.Api
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChannelResponseModel
    {

        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("number")]
        public string Number { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("fFmpegProfile")]
        public string FFmpegProfile { get; set; }

        [JsonPropertyName("language")]
        public string Language { get; set; }

        [JsonPropertyName("streamingMode")]
        public string StreamingMode { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CombinedVersion
    {

        [JsonPropertyName("apiVersion")]
        public int ApiVersion { get; set; }

        [JsonPropertyName("appVersion")]
        public string AppVersion { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateFFmpegProfile
    {

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("threadCount")]
        public int ThreadCount { get; set; }

        [JsonPropertyName("hardwareAcceleration")]
        public HardwareAccelerationKind HardwareAcceleration { get; set; }

        [JsonPropertyName("vaapiDisplay")]
        public string VaapiDisplay { get; set; }

        [JsonPropertyName("vaapiDriver")]
        public VaapiDriver VaapiDriver { get; set; }

        [JsonPropertyName("vaapiDevice")]
        public string VaapiDevice { get; set; }

        [JsonPropertyName("qsvExtraHardwareFrames")]
        public int? QsvExtraHardwareFrames { get; set; }

        [JsonPropertyName("resolutionId")]
        public int ResolutionId { get; set; }

        [JsonPropertyName("scalingBehavior")]
        public ScalingBehavior ScalingBehavior { get; set; }

        [JsonPropertyName("videoFormat")]
        public FFmpegProfileVideoFormat VideoFormat { get; set; }

        [JsonPropertyName("videoProfile")]
        public string VideoProfile { get; set; }

        [JsonPropertyName("videoPreset")]
        public string VideoPreset { get; set; }

        [JsonPropertyName("allowBFrames")]
        public bool AllowBFrames { get; set; }

        [JsonPropertyName("bitDepth")]
        public FFmpegProfileBitDepth BitDepth { get; set; }

        [JsonPropertyName("videoBitrate")]
        public int VideoBitrate { get; set; }

        [JsonPropertyName("videoBufferSize")]
        public int VideoBufferSize { get; set; }

        [JsonPropertyName("tonemapAlgorithm")]
        public FFmpegProfileTonemapAlgorithm TonemapAlgorithm { get; set; }

        [JsonPropertyName("audioFormat")]
        public FFmpegProfileAudioFormat AudioFormat { get; set; }

        [JsonPropertyName("audioBitrate")]
        public int AudioBitrate { get; set; }

        [JsonPropertyName("audioBufferSize")]
        public int AudioBufferSize { get; set; }

        [JsonPropertyName("normalizeLoudnessMode")]
        public NormalizeLoudnessMode NormalizeLoudnessMode { get; set; }

        [JsonPropertyName("audioChannels")]
        public int AudioChannels { get; set; }

        [JsonPropertyName("audioSampleRate")]
        public int AudioSampleRate { get; set; }

        [JsonPropertyName("normalizeFramerate")]
        public bool NormalizeFramerate { get; set; }

        [JsonPropertyName("deinterlaceVideo")]
        public bool DeinterlaceVideo { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSmartCollection
    {

        [JsonPropertyName("query")]
        public string Query { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FFmpegFullProfileResponseModel
    {

        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("threadCount")]
        public int ThreadCount { get; set; }

        [JsonPropertyName("hardwareAcceleration")]
        public HardwareAccelerationKind HardwareAcceleration { get; set; }

        [JsonPropertyName("vaapiDisplay")]
        public string VaapiDisplay { get; set; }

        [JsonPropertyName("vaapiDriver")]
        public VaapiDriver VaapiDriver { get; set; }

        [JsonPropertyName("vaapiDevice")]
        public string VaapiDevice { get; set; }

        [JsonPropertyName("qsvExtraHardwareFrames")]
        public int? QsvExtraHardwareFrames { get; set; }

        [JsonPropertyName("resolution")]
        public string Resolution { get; set; }

        [JsonPropertyName("scalingBehavior")]
        public ScalingBehavior ScalingBehavior { get; set; }

        [JsonPropertyName("videoFormat")]
        public FFmpegProfileVideoFormat VideoFormat { get; set; }

        [JsonPropertyName("videoProfile")]
        public string VideoProfile { get; set; }

        [JsonPropertyName("videoPreset")]
        public string VideoPreset { get; set; }

        [JsonPropertyName("allowBFrames")]
        public bool AllowBFrames { get; set; }

        [JsonPropertyName("bitDepth")]
        public FFmpegProfileBitDepth BitDepth { get; set; }

        [JsonPropertyName("videoBitrate")]
        public int VideoBitrate { get; set; }

        [JsonPropertyName("videoBufferSize")]
        public int VideoBufferSize { get; set; }

        [JsonPropertyName("tonemapAlgorithm")]
        public FFmpegProfileTonemapAlgorithm TonemapAlgorithm { get; set; }

        [JsonPropertyName("audioFormat")]
        public FFmpegProfileAudioFormat AudioFormat { get; set; }

        [JsonPropertyName("audioBitrate")]
        public int AudioBitrate { get; set; }

        [JsonPropertyName("audioBufferSize")]
        public int AudioBufferSize { get; set; }

        [JsonPropertyName("normalizeLoudnessMode")]
        public NormalizeLoudnessMode NormalizeLoudnessMode { get; set; }

        [JsonPropertyName("audioChannels")]
        public int AudioChannels { get; set; }

        [JsonPropertyName("audioSampleRate")]
        public int AudioSampleRate { get; set; }

        [JsonPropertyName("normalizeFramerate")]
        public bool NormalizeFramerate { get; set; }

        [JsonPropertyName("deinterlaceVideo")]
        public bool? DeinterlaceVideo { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FFmpegProfileAudioFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Aac")]
        Aac = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Ac3")]
        Ac3 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Copy")]
        Copy = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FFmpegProfileBitDepth
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EightBit")]
        EightBit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TenBit")]
        TenBit = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FFmpegProfileTonemapAlgorithm
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Linear")]
        Linear = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Clip")]
        Clip = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Gamma")]
        Gamma = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Reinhard")]
        Reinhard = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Mobius")]
        Mobius = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Hable")]
        Hable = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FFmpegProfileVideoFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"H264")]
        H264 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hevc")]
        Hevc = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Mpeg2Video")]
        Mpeg2Video = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Av1")]
        Av1 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Copy")]
        Copy = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HardwareAccelerationKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Qsv")]
        Qsv = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Nvenc")]
        Nvenc = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Vaapi")]
        Vaapi = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"VideoToolbox")]
        VideoToolbox = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Amf")]
        Amf = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"V4l2m2m")]
        V4l2m2m = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Rkmpp")]
        Rkmpp = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HlsSessionModel
    {

        [JsonPropertyName("channelNumber")]
        public string ChannelNumber { get; set; }

        [JsonPropertyName("state")]
        public string State { get; set; }

        [JsonPropertyName("transcodedUntil")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TranscodedUntil { get; set; }

        [JsonPropertyName("lastAccess")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastAccess { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NormalizeLoudnessMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Off")]
        Off = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LoudNorm")]
        LoudNorm = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ScalingBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ScaleAndPad")]
        ScaleAndPad = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Stretch")]
        Stretch = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Crop")]
        Crop = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScanShowRequest
    {

        [JsonPropertyName("showTitle")]
        public string ShowTitle { get; set; }

        [JsonPropertyName("deepScan")]
        public bool DeepScan { get; set; } = false;

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SmartCollectionResponseModel
    {

        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("query")]
        public string Query { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateFFmpegProfile
    {

        [JsonPropertyName("fFmpegProfileId")]
        public int FFmpegProfileId { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("threadCount")]
        public int ThreadCount { get; set; }

        [JsonPropertyName("hardwareAcceleration")]
        public HardwareAccelerationKind HardwareAcceleration { get; set; }

        [JsonPropertyName("vaapiDisplay")]
        public string VaapiDisplay { get; set; }

        [JsonPropertyName("vaapiDriver")]
        public VaapiDriver VaapiDriver { get; set; }

        [JsonPropertyName("vaapiDevice")]
        public string VaapiDevice { get; set; }

        [JsonPropertyName("qsvExtraHardwareFrames")]
        public int? QsvExtraHardwareFrames { get; set; }

        [JsonPropertyName("resolutionId")]
        public int ResolutionId { get; set; }

        [JsonPropertyName("scalingBehavior")]
        public ScalingBehavior ScalingBehavior { get; set; }

        [JsonPropertyName("videoFormat")]
        public FFmpegProfileVideoFormat VideoFormat { get; set; }

        [JsonPropertyName("videoProfile")]
        public string VideoProfile { get; set; }

        [JsonPropertyName("videoPreset")]
        public string VideoPreset { get; set; }

        [JsonPropertyName("allowBFrames")]
        public bool AllowBFrames { get; set; }

        [JsonPropertyName("bitDepth")]
        public FFmpegProfileBitDepth BitDepth { get; set; }

        [JsonPropertyName("videoBitrate")]
        public int VideoBitrate { get; set; }

        [JsonPropertyName("videoBufferSize")]
        public int VideoBufferSize { get; set; }

        [JsonPropertyName("tonemapAlgorithm")]
        public FFmpegProfileTonemapAlgorithm TonemapAlgorithm { get; set; }

        [JsonPropertyName("audioFormat")]
        public FFmpegProfileAudioFormat AudioFormat { get; set; }

        [JsonPropertyName("audioBitrate")]
        public int AudioBitrate { get; set; }

        [JsonPropertyName("audioBufferSize")]
        public int AudioBufferSize { get; set; }

        [JsonPropertyName("normalizeLoudnessMode")]
        public NormalizeLoudnessMode NormalizeLoudnessMode { get; set; }

        [JsonPropertyName("audioChannels")]
        public int AudioChannels { get; set; }

        [JsonPropertyName("audioSampleRate")]
        public int AudioSampleRate { get; set; }

        [JsonPropertyName("normalizeFramerate")]
        public bool NormalizeFramerate { get; set; }

        [JsonPropertyName("deinterlaceVideo")]
        public bool DeinterlaceVideo { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateSmartCollection
    {

        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("query")]
        public string Query { get; set; }

        private IDictionary<string, object> _additionalProperties;

        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VaapiDriver
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"iHD")]
        IHD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"i965")]
        I965 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RadeonSI")]
        RadeonSI = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Nouveau")]
        Nouveau = 4,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore  649
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
#pragma warning restore 8765